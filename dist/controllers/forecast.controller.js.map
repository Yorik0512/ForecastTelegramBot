{"version":3,"sources":["controllers/forecast.controller.js"],"names":["Forecast","forecastService","forecastEntities","ctx","forecastData","getCurrentForecast","userName","message","from","username","then","data","msg","currentForecast","reply","ForecastController"],"mappings":";;;;;;;;;;;;;IAAMA,Q;;;;;;;;;oCACYC,e,EAAiBC,gB,EAAkBC,G,EAAK;AACtD,UAAMC,YAAY,GAAGH,eAAe,CAACI,kBAAhB,EAArB;AACA,UAAMC,QAAQ,GAAGH,GAAG,CAACI,OAAJ,CAAYC,IAAZ,CAAiBC,QAAlC;AACAL,MAAAA,YAAY,CAACM,IAAb,CAAkB,UAACC,IAAD,EAAU;AAC1B,YAAMC,GAAG,GAAGV,gBAAgB,CAACW,eAAjB,CAAiCF,IAAjC,EAAuCL,QAAvC,CAAZ;AACA,eAAOH,GAAG,CAACW,KAAJ,CAAUF,GAAV,CAAP;AACD,OAHD;AAID;;;;;AAGH,IAAMG,kBAAkB,GAAG,IAAIf,QAAJ,EAA3B;eACee,kB","sourcesContent":["class Forecast {\n  currentForecast(forecastService, forecastEntities, ctx) {\n    const forecastData = forecastService.getCurrentForecast();\n    const userName = ctx.message.from.username;\n    forecastData.then((data) => {\n      const msg = forecastEntities.currentForecast(data, userName);\n      return ctx.reply(msg);\n    });\n  }\n}\n\nconst ForecastController = new Forecast();\nexport default ForecastController;\n"],"file":"forecast.controller.js"}
{"version":3,"sources":["index.js"],"names":["dotenv","config","bot","Telegraf","process","env","BOT_TOKEN","wit","TelegrafWit","WIT_TOKEN","forecastService","ForecastService","forecastEntities","ForecastEntities","forecastController","ForecastController","telegram","getMe","then","botInfo","options","username","on","ctx","meaning","message","text","res","entities","currentForecast","startPolling"],"mappings":";;;;AAAA;;AACA;;AACA;;AAGA;;AACA;;AAGA;;AALA;AAIA;AAGA;AACAA,mBAAOC,MAAP;;AAEA,IAAMC,GAAG,GAAG,IAAIC,oBAAJ,CAAaC,OAAO,CAACC,GAAR,CAAYC,SAAzB,CAAZ;AACA,IAAMC,GAAG,GAAG,IAAIC,uBAAJ,CAAgBJ,OAAO,CAACC,GAAR,CAAYI,SAA5B,CAAZ;AACA,IAAMC,eAAe,GAAG,IAAIC,oBAAJ,EAAxB;AACA,IAAMC,gBAAgB,GAAG,IAAIC,qBAAJ,EAAzB;AACA,IAAMC,kBAAkB,GAAG,IAAIC,qBAAJ,EAA3B;AAEAb,GAAG,CAACc,QAAJ,CAAaC,KAAb,GAAqBC,IAArB,CAA0B,UAACC,OAAD,EAAa;AACrCjB,EAAAA,GAAG,CAACkB,OAAJ,CAAYC,QAAZ,GAAuBF,OAAO,CAACE,QAA/B;AACD,CAFD,E,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAnB,GAAG,CAACoB,EAAJ,CAAO,MAAP,EAAe,UAACC,GAAD;AAAA,SAAShB,GAAG,CACxBiB,OADqB,CACbD,GAAG,CAACE,OAAJ,CAAYC,IADC,EAErBR,IAFqB,CAEhB,UAACS,GAAD,EAAS;AACb,QAAI,qBAAqBA,GAAG,CAACC,QAA7B,EAAuC;AACrCd,MAAAA,kBAAkB,CAACe,eAAnB,CAAmCnB,eAAnC,EAAoDE,gBAApD,EAAsEW,GAAtE;AACD;;AACD,WAAO,KAAP;AACD,GAPqB,CAAT;AAAA,CAAf;AASArB,GAAG,CAAC4B,YAAJ","sourcesContent":["import Telegraf from 'telegraf';\nimport dotenv from 'dotenv';\nimport TelegrafWit from 'telegraf-wit';\n\n// Services.\nimport ForecastService from './services/forecast.service';\nimport ForecastEntities from './entites/forecast.entites';\n\n// Controllers.\nimport ForecastController from './controllers/forecast.controller';\n\n// Setup dotenv.\ndotenv.config();\n\nconst bot = new Telegraf(process.env.BOT_TOKEN);\nconst wit = new TelegrafWit(process.env.WIT_TOKEN);\nconst forecastService = new ForecastService();\nconst forecastEntities = new ForecastEntities();\nconst forecastController = new ForecastController();\n\nbot.telegram.getMe().then((botInfo) => {\n  bot.options.username = botInfo.username;\n});\n\n// function timeConverter(timestamp) {\n//   const a = new Date(timestamp * 1000);\n//   const months = ['Jan', 'Feb', 'Mar', 'Apr',\n//   'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n//   const year = a.getFullYear();\n//   const month = months[a.getMonth()];\n//   const date = a.getDate();\n//   const hour = a.getHours();\n//   const min = a.getMinutes();\n//   return `${date} ${month} ${year} ${hour} ${min}`;\n// }\n\nbot.on('text', (ctx) => wit\n  .meaning(ctx.message.text)\n  .then((res) => {\n    if ('currentForecast' in res.entities) {\n      forecastController.currentForecast(forecastService, forecastEntities, ctx);\n    }\n    return false;\n  }));\n\nbot.startPolling();\n"],"file":"index.js"}